@model IEnumerable<PetaFF.Models.PetAd>
@using PetaFF.Extensions
@using System.Globalization

@{
    ViewData["Title"] = "Объявления других";

    // Список фейковых объявлений с максимально подходящими фото
    var fakeAds = new List<PetaFF.Models.PetAd>
    {
        // Барсик — серый кот
        new PetaFF.Models.PetAd { Name = "Барсик", Type = "Кот", Description = "Серый пушистый кот, пропал возле ул. Немига. Без ошейника.", DateLost = DateTime.ParseExact("10.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375291234567", Status = PetStatus.InSearch, Address = "ул. Немига", District = "Центральный", User = new PetaFF.Models.User { Username = "Анна" }, PhotoPath = "https://images.pexels.com/photos/1276553/pexels-photo-1276553.jpeg" },
        // Белла — светлая собака (лабрадор)
        new PetaFF.Models.PetAd { Name = "Белла", Type = "Собака", Description = "Лабрадор, светлая, дружелюбная. Убежала возле Логойского тракта.", DateLost = DateTime.ParseExact("29.04.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375296543210", Status = PetStatus.InSearch, Address = "Логойский тракт", District = "Советский", User = new PetaFF.Models.User { Username = "Иван" }, PhotoPath = "https://images.pexels.com/photos/8700/pexels-photo.jpg" },
        // Мурка — черная кошка с белыми лапками
        new PetaFF.Models.PetAd { Name = "Мурка", Type = "Кошка", Description = "Черная с белыми лапками, исчезла в районе пл. Победы.", DateLost = DateTime.ParseExact("01.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375447891234", Status = PetStatus.InSearch, Address = "пл. Победы", District = "Ленинский", User = new PetaFF.Models.User { Username = "Мария" }, PhotoPath = "https://images.pexels.com/photos/208984/pexels-photo-208984.jpeg" },
        // Рекс — овчарка
        new PetaFF.Models.PetAd { Name = "Рекс", Type = "Собака", Description = "Овчарка, откликается на кличку. Потерян на Кальварийской.", DateLost = DateTime.ParseExact("15.04.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375333456789", Status = PetStatus.InSearch, Address = "ул. Кальварийская", District = "Фрунзенский", User = new PetaFF.Models.User { Username = "Павел" }, PhotoPath = "https://images.pexels.com/photos/4587991/pexels-photo-4587991.jpeg" },
        // Снежок — белый кролик
        new PetaFF.Models.PetAd { Name = "Снежок", Type = "Кролик", Description = "Белый декоративный кролик, пропал с двора на ул. Ангарской.", DateLost = DateTime.ParseExact("05.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375297654321", Status = PetStatus.InSearch, Address = "ул. Ангарская", District = "Заводской", User = new PetaFF.Models.User { Username = "Ольга" }, PhotoPath = "https://images.pexels.com/photos/326012/pexels-photo-326012.jpeg" },
        // Том — рыжий кот
        new PetaFF.Models.PetAd { Name = "Том", Type = "Кот", Description = "Рыжий, крупный, ушёл с ул. Восточной.", DateLost = DateTime.ParseExact("22.03.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375291111222", Status = PetStatus.InSearch, Address = "ул. Восточная", District = "Партизанский", User = new PetaFF.Models.User { Username = "Артём" }, PhotoPath = "https://images.pexels.com/photos/1170986/pexels-photo-1170986.jpeg" },
        // Лаки — йоркширский терьер
        new PetaFF.Models.PetAd { Name = "Лаки", Type = "Собака", Description = "Йоркширский терьер, исчез возле Орловской.", DateLost = DateTime.ParseExact("03.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375295551234", Status = PetStatus.InSearch, Address = "ул. Орловская", District = "Октябрьский", User = new PetaFF.Models.User { Username = "Елена" }, PhotoPath = "https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg" },
        // Дымка — серая пушистая кошка
        new PetaFF.Models.PetAd { Name = "Дымка", Type = "Кошка", Description = "Серая, пушистая, боится людей. Потеряна в районе Бехтерева.", DateLost = DateTime.ParseExact("18.04.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375445671234", Status = PetStatus.InSearch, Address = "ул. Бехтерева", District = "Московский", User = new PetaFF.Models.User { Username = "Дмитрий" }, PhotoPath = "https://images.pexels.com/photos/1276553/pexels-photo-1276553.jpeg" },
        // Чарли — попугай
        new PetaFF.Models.PetAd { Name = "Чарли", Type = "Попугай", Description = "Зелёный волнистый попугай, умеет говорить. Вылетел в районе Брилевской.", DateLost = DateTime.ParseExact("09.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375298765432", Status = PetStatus.InSearch, Address = "ул. Брилевская", District = "Ленинский", User = new PetaFF.Models.User { Username = "Светлана" }, PhotoPath = "https://images.pexels.com/photos/45911/peacock-bird-plumage-color-45911.jpeg" },
        // Грей — хаски
        new PetaFF.Models.PetAd { Name = "Грей", Type = "Собака", Description = "Хаски, голубые глаза. Пропал на Городском Вале.", DateLost = DateTime.ParseExact("07.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375292345678", Status = PetStatus.InSearch, Address = "Городской Вал", District = "Центральный", User = new PetaFF.Models.User { Username = "Алексей" }, PhotoPath = "https://images.pexels.com/photos/356378/pexels-photo-356378.jpeg" },
        // Луна — трёхцветная кошка
        new PetaFF.Models.PetAd { Name = "Луна", Type = "Кошка", Description = "Трехцветная, домашняя. Убежала из квартиры на Сурганова.", DateLost = DateTime.ParseExact("30.04.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375291234888", Status = PetStatus.InSearch, Address = "ул. Сурганова", District = "Советский", User = new PetaFF.Models.User { Username = "Виктория" }, PhotoPath = "https://images.pexels.com/photos/45201/kitty-cat-kitten-pet-45201.jpeg" },
        // Шарик — дворняга
        new PetaFF.Models.PetAd { Name = "Шарик", Type = "Собака", Description = "Местный песик, сбежал из двора в Каменной Горке.", DateLost = DateTime.ParseExact("01.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375299998877", Status = PetStatus.InSearch, Address = "Каменная Горка", District = "Фрунзенский", User = new PetaFF.Models.User { Username = "Сергей" }, PhotoPath = "https://images.pexels.com/photos/4587991/pexels-photo-4587991.jpeg" },
        // Кнопа — маленькая чёрная кошка
        new PetaFF.Models.PetAd { Name = "Кнопа", Type = "Кошка", Description = "Маленькая чёрная кошечка, исчезла на Слепянке.", DateLost = DateTime.ParseExact("27.04.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375293332211", Status = PetStatus.InSearch, Address = "Слепянка", District = "Партизанский", User = new PetaFF.Models.User { Username = "Наталья" }, PhotoPath = "https://images.pexels.com/photos/208984/pexels-photo-208984.jpeg" },
        // Ричи — французский бульдог
        new PetaFF.Models.PetAd { Name = "Ричи", Type = "Собака", Description = "Французский бульдог, последний раз видели возле Маяковского.", DateLost = DateTime.ParseExact("04.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375291239999", Status = PetStatus.InSearch, Address = "ул. Маяковского", District = "Заводской", User = new PetaFF.Models.User { Username = "Андрей" }, PhotoPath = "https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg" },
        // Жужа — бежевая кошка
        new PetaFF.Models.PetAd { Name = "Жужа", Type = "Кошка", Description = "Бежево-серая, потеряна возле Зеленого Луга.", DateLost = DateTime.ParseExact("08.05.2025", "dd.MM.yyyy", CultureInfo.InvariantCulture), ContactPhone = "+375292223344", Status = PetStatus.InSearch, Address = "Зеленый Луг", District = "Советский", User = new PetaFF.Models.User { Username = "Татьяна" }, PhotoPath = "https://images.pexels.com/photos/45201/kitty-cat-kitten-pet-45201.jpeg" },
    };
}

<h1>Объявления других пользователей</h1>

<div class="row">
    @foreach (var item in
        fakeAds.Select((ad, idx) => new { ad, idx = (int?)idx })
        .Concat((Model ?? Enumerable.Empty<PetaFF.Models.PetAd>()).Select(ad => new { ad, idx = (int?)null }))
    )
    {
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                @if (!string.IsNullOrEmpty(item.ad.PhotoPath))
                {
                    <img src="@item.ad.PhotoPath" class="card-img-top" alt="@item.ad.Name" style="height: 200px; object-fit: cover;">
                }
                <div class="card-body">
                    <h5 class="card-title">@item.ad.Name</h5>
                    <p class="card-text">
                        <strong>Тип:</strong> @item.ad.Type<br />
                        <strong>Статус:</strong> 
                        <span class="badge @(item.ad.Status switch {
                            PetStatus.InSearch => "bg-danger",
                            PetStatus.Found => "bg-success",
                            PetStatus.TemporaryShelter => "bg-warning",
                            PetStatus.InShelter => "bg-info",
                            _ => "bg-secondary"
                        })">
                            @item.ad.Status.GetDisplayName()
                        </span>
                    </p>
                    <p class="card-text">@item.ad.Description</p>
                    <p class="card-text">
                        <small class="text-muted d-flex align-items-center">
                            <img src="https://ui-avatars.com/api/?name=User&background=cccccc&color=222222&size=64" alt="Аватар" style="width:32px;height:32px;border-radius:50%;object-fit:cover;margin-right:8px;"> 
                            Автор: @item.ad.User?.Username<br />
                            Контакты: @item.ad.ContactPhone<br />
                            Дата: @item.ad.DateLost?.ToString("dd.MM.yyyy")
                        </small>
                    </p>
                    <div class="d-flex justify-content-between align-items-center">
                        @if (item.idx != null)
                        {
                            <a asp-controller="PetAd" asp-action="FakeDetails" asp-route-id="@(item.idx + 1)" class="btn btn-primary">Подробнее</a>
                            <button type="button" class="btn btn-outline-warning ms-2 add-fake-favorite" data-fake-idx="@item.idx">
                                <i class="fas fa-star"></i> Добавить в избранное
                            </button>
                        }
                        else if (item.ad.Id > 0)
                        {
                            <a asp-controller="PetAd" asp-action="Details" asp-route-id="@item.ad.Id" class="btn btn-primary">Подробнее</a>
                            <form asp-controller="Favorite" asp-action="ToggleFavorite" method="post" class="ms-2">
                                <input type="hidden" name="petAdId" value="@item.ad.Id" />
                                <button type="submit" class="btn btn-outline-warning">
                                    <i class="fas fa-star"></i> Добавить в избранное
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.Any())
{
    <div class="alert alert-info">
        Пока нет объявлений других пользователей
    </div>
}

@section Scripts {
    <script>
        // Добавляем Font Awesome для иконок
        if (!document.querySelector('link[href*="font-awesome"]')) {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css';
            document.head.appendChild(link);
        }

        // --- Избранное для фейковых объявлений ---
        document.addEventListener('DOMContentLoaded', function() {
            // --- Деактивация кнопок для уже добавленных фейковых объявлений ---
            let favs = [];
            try {
                favs = JSON.parse(localStorage.getItem('fakeFavorites') || '[]');
            } catch {}
            document.querySelectorAll('.add-fake-favorite').forEach(function(btn) {
                const idx = btn.getAttribute('data-fake-idx');
                const fakeAds = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fakeAds));
                const ad = fakeAds[idx];
                if (ad && favs.some(f => f.Name === ad.Name && f.Type === ad.Type && f.DateLost === ad.DateLost)) {
                    btn.innerHTML = '<i class="fas fa-star"></i> В избранном';
                    btn.disabled = true;
                }
                btn.addEventListener('click', function() {
                    const idx = btn.getAttribute('data-fake-idx');
                    const fakeAds = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fakeAds));
                    const ad = fakeAds[idx];
                    if (!ad) return;
                    let favs = JSON.parse(localStorage.getItem('fakeFavorites') || '[]');
                    if (!favs.some(f => f.Name === ad.Name && f.Type === ad.Type && f.DateLost === ad.DateLost)) {
                        // Сохраняем статус в правильном формате
                        const statusMap = {
                            'InSearch': { class: 'bg-danger', displayName: 'В поиске' },
                            'Found': { class: 'bg-success', displayName: 'Найден' },
                            'TemporaryShelter': { class: 'bg-warning', displayName: 'Временный приют' },
                            'InShelter': { class: 'bg-info', displayName: 'В приюте' }
                        };
                        
                        // Создаем копию объявления с правильным форматом статуса
                        const adToSave = {
                            ...ad,
                            Status: statusMap[ad.Status] || { class: 'bg-secondary', displayName: 'Неизвестно' }
                        };
                        
                        favs.push(adToSave);
                        localStorage.setItem('fakeFavorites', JSON.stringify(favs));
                        btn.innerHTML = '<i class="fas fa-star"></i> В избранном';
                        btn.disabled = true;
                    }
                });
            });
        });
    </script>
} 